<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8cb758f3-883d-42f5-8015-5e53beee548e" activeEnvironment="Default" name="4.HRMS-JsonSchemaValidation" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="375040cc-97b1-4b3c-b458-c79f53e1effe" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://ULTP-532:8080/</con:endpoint><con:endpoint>http://ULTP-532:8089/</con:endpoint><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Employee" path="/hrms/employee/{emp_id}" id="37b19445-91ed-4109-af3b-091206246cb0"><con:settings/><con:parameters><con:parameter><con:name>emp_id</con:name><con:value>emp_id</con:value><con:style>TEMPLATE</con:style><con:default>emp_id</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET employee" id="4b9d9d78-d8f2-45c8-9875-965215345d47" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="getEmpDetailsRequest" id="e332e429-e63e-4506-b564-5948c370a122" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:originalUri>http://localhost/hrms/employee/12</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="emp_id" value="12" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>emp_id</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="d0bd51fd-4a3e-4aba-b597-0b43d5d5fd2d" name="EmpMangTestSuite"><con:description>TestSuite generated for REST Service [http://localhost:9876]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b645f7bb-5301-4133-b851-b0ba66d14cfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateEmpDetailsSchemaTC" searchProperties="true"><con:description>TestCase generated for REST Resource [Employee] located at [/hrms/employee/{emp_id}]</con:description><con:settings/><con:testStep type="restrequest" name="getEmpDetailsRequest" id="2e618fca-9d89-4dd0-b06c-44ee7e5fdf41"><con:settings/><con:config service="http://localhost:9876" resourcePath="/hrms/employee/{emp_id}" methodName="GET employee" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getEmpDetailsRequest" id="e332e429-e63e-4506-b564-5948c370a122" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:originalUri>http://localhost/hrms/employee/12</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="emp_id" value="12" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>emp_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="bdcd1ec1-f48a-4a4f-b271-22343ed16f72"><con:settings/><con:config><script>import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import com.github.fge.jsonschema.core.report.ProcessingReport
import com.github.fge.jsonschema.main.JsonSchema
import com.github.fge.jsonschema.main.JsonSchemaFactory

def response = context.expand('${getEmpDetailsRequest#Response}')
log.info response

ObjectMapper mapper = new ObjectMapper()
JsonNode invoiceJSON = mapper.readTree(response)
JsonNode invoiceSchemaJSON = mapper.readTree(new File("/DATA/PRESENTATION/4.HRMS-JsonSchemaValidation/emp_schema.json"))

JsonSchemaFactory factory = JsonSchemaFactory.byDefault()
JsonSchema invoiceSchema = factory.getJsonSchema(invoiceSchemaJSON)
if (invoiceSchema.validInstance(invoiceJSON)) log.info("Response Validated!") 
else {
	testRunner.fail(invoiceSchema.validate(invoiceJSON).toString())
	log.info("Schema validation Failed!") 
	
}

</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="337d121d-0b34-4657-9c90-8bb440ca0436" port="9876" path="/" host="ULTP-532" name="SchemaValidationMock" docroot=""><con:settings/><con:properties/><con:restMockAction name="/hrms/employee/" method="GET" resourcePath="/hrms/employee/" id="2f1e6f68-8bc2-4782-a65e-6d09b5b93c91"><con:settings/><con:defaultResponse>Response OK</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>import groovy.json.JsonSlurper
def path = mockRequest.getPath().split("/")



/*def req = mockRequest.getRequestContent()
/*def jsonObj = jsonSlurper.parseText(req)
log.info jsonObj.emp.id

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response OK" id="ee4b0a44-9e55-4f08-907e-f17a8f10952e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"employee": {
"id": 7934,
"name": "MILLER",
"age": 28,
"deptNo": 10
}}</con:responseContent></con:response><con:response name="Response Dept Missing" id="19481320-78dd-4fa2-9a55-21a9328cca21" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"employee": {
"id": 7934,
"name": "MILLER",
"age": 28
}}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>