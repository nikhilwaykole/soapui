<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="4f8fb838-ec98-42a2-8748-8e1ccbf58f77" activeEnvironment="Default" name="IssueTrackingSys" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="44a7b9ee-8965-47b2-adc9-21f7a1428620" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Login" path="/rest/login" id="99e58933-f583-4748-949d-29aa5364e460"><con:settings/><con:parameters/><con:method name="GET" id="329a8e09-7007-4e66-8429-b3c1c7ee0479" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:log="http://localhost/rest/login">log:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/rest/login">log:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="LoginRequest" id="c1482e29-e816-49a7-9dc6-5f1362a60a38" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="login" value="valid-uname"/>
  &lt;con:entry key="password" value="valid-passwd"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="8923726b-4416-4aa7-9595-df2dfbd8533f" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Bug" path="/rest/bug" id="6e99499d-141d-4c50-9f25-1a000b7eef95"><con:settings/><con:parameters/><con:method name="POST" id="a5e52d6d-a993-46f8-85c8-f38393f779dc" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:bug="http://localhost/rest/bug">bug:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:bug="http://localhost/rest/bug">bug:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="CreateBug" id="c0fbbabf-0add-4e1e-8f4d-473c58da3765" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>{ "id" : "351",
  "product" : "Quickoffice",
  "component" : "Word",
  "version" : "2.4",
  "summary" : "Document crashed",
  "alias" : "Crash",
  "op_sys" : "All",
  "priority" : "High",
  "rep_platform" : "All"
}</con:request><con:originalUri>http://localhost/rest/bug</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="8df58ea2-1126-4a44-ad83-c0cfcb009616" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Attachment" path="/rest/bug/attachment" id="45f60d02-6b52-429e-9f5c-57c5e4aaaa90"><con:settings/><con:parameters/><con:method name="POST" id="f70d4d48-c709-479e-a923-76e4720fe7d8" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:att="http://localhost/bug/attachment">att:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:request name="CreateAttachment" id="621c9f14-d41f-4e66-ac67-e0acfd742979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>{
  "is_patch" : true,
  "comment" : "This is a new attachment comment",
  "is_markdown" : true,
  "summary" : "Test Attachment",
  "content_type" : "text/plain",
  "data" : "test",
  "file_name" : "test_attachment.txt",
  "obsoletes" : [],
  "is_private" : false
}</con:request><con:originalUri>http://localhost/bug/attachment</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="5fcd4e3c-1f65-4645-acb8-1781877abcd8" name="ITS-TestSuite"><con:settings/><con:runType>PARALLELL</con:runType><con:testCase id="9a4ba824-b838-4f1d-a06b-53f6a97f02bf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateBugTC" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET - Login" id="409514c2-3024-4796-ad26-14a0fa8a2e0b"><con:settings/><con:config service="http://localhost:9876" methodName="GET" resourcePath="/rest/login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - Login" id="6bc303ed-fbd5-47cc-b190-0c43d77db809" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="login" value="valid-login"/>
  &lt;con:entry key="password" value="valid-pwd"/>
  &lt;con:entry key="Accept" value="text/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:originalUri>http://localhost/rest/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2dd27165-5753-4658-8c1d-aa733547066e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - CreateBug" id="ae689690-3e0b-48bf-b8b1-e32bf29fe8de"><con:settings/><con:config service="http://localhost:9876" resourcePath="/rest/bug" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - CreateBug" id="c0fbbabf-0add-4e1e-8f4d-473c58da3765" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>{ "id" : "351",
  "product" : "Quickoffice",
  "component" : "Word",
  "version" : "2.4",
  "summary" : "Document crashed",
  "alias" : "Crash",
  "op_sys" : "All",
  "priority" : "High",
  "rep_platform" : "All"
}</con:request><con:originalUri>http://localhost/rest/bug</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ef688033-5fe6-4587-8d55-ee634b5ae345" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0205f744-df4e-4c3c-8d9d-f647898651e9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateAttachment" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="CreateBugTC" id="a3e18185-e003-4f35-b12d-aefad4c4ad03"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>9a4ba824-b838-4f1d-a06b-53f6a97f02bf</con:targetTestCase><con:properties/><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="CreateAttachment" id="5b6c2910-2a65-40c2-88b9-102e42b782cf"><con:settings/><con:config service="http://localhost:9876" resourcePath="/rest/bug/attachment" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateAttachment" id="621c9f14-d41f-4e66-ac67-e0acfd742979" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>{ "id" : 3,
  "is_patch" : true,
  "comment" : "This is a new attachment comment",
  "is_markdown" : true,
  "summary" : "Test Attachment",
  "content_type" : "text/plain",
  "data" : "test",
  "file_name" : "test_attachment.txt",
  "obsoletes" : [],
  "is_private" : false
}</con:request><con:originalUri>http://localhost/bug/attachment</con:originalUri><con:assertion type="JsonPath RegEx Match" id="a8a4c5da-7a82-44cd-ba0f-cf5742d958b0" name="JsonPath RegEx Match"><con:configuration><path>attachmentId</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>\d+</regEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="e5f2095d-972b-4d7f-9155-d4a00f4b858d" port="9876" path="/rest" host="ULTP-532" name="IssueTrackingMock" docroot=""><con:settings/><con:properties/><con:onRequestScript/><con:restMockAction name="/login" method="GET" resourcePath="/login" id="66c9ed04-ca51-4b0c-903a-ed7058ed7b73"><con:settings/><con:defaultResponse>BadRequest</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>    try{
    	 reqAcceptHeader = mockRequest.getRequestHeaders().get("Accept")[0]
      reqLoginHeader = mockRequest.getRequestHeaders().get("login")[0]
      reqPwdHeader = mockRequest.getRequestHeaders().get("password")[0]
      if (reqAcceptHeader.contains("application/json")){
      	if(reqLoginHeader == 'valid-login' &amp;&amp; reqPwdHeader == 'valid-pwd' ){
      		log.info "login success. return JSON response"
        		return 'LoginSuccessJSON'
      	}else{
      		log.info "login failed. return json response"
        		return 'LoginFailedJSON'
      	}
      }else if (reqAcceptHeader.contains("text/xml"))
      	if(reqLoginHeader == 'valid-login' &amp;&amp; reqPwdHeader == 'valid-pwd'){
      		log.info "login success. return XML response"
        		return 'LoginSuccessXML'
      	}else{
      		log.info "login failed. return XML response"
        		return 'LoginFailedXML'
      }
    }catch(Exception e){
    		log.info e
      	return 'BadRequest'
    }

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="LoginSuccessJSON" id="818ba37b-a09b-410f-8141-fd5b47b916cd" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "id": 1,
   "token": "1-47nj12FfT7"
}</con:responseContent></con:response><con:response name="LoginFailedJSON" id="e43da7ae-8c23-4138-a3b7-c6c9f8c89d02" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{
   "code": 401,
   "message": "The login or password you entered are not valid.",
   "error": true,
   "documentation": "http://localhost:9876/rest/5.0/api/"
}</con:responseContent></con:response><con:response name="LoginSuccessXML" id="dc98320d-f974-44a3-9df8-4644eb844f36" httpResponseStatus="200"><con:settings/><con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <soap:Body>
      <LoginResponse xmlns="http://www.webserviceX.NET">
         <LoginResult><
         		<id>1</id>
         		<token>1-47nj12FfT7</token>
         </LoginResult>
      </LoginResponse>
   </soap:Body>
</soap:Envelope>]]></con:responseContent></con:response><con:response name="LoginFailedXML" id="3ed1763c-e88d-423a-a353-42a96c18b176" httpResponseStatus="401"><con:settings/><con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <soap:Body>
      <LoginResponse xmlns="http://www.webserviceX.NET">
         <LoginResult><
         		<message>The login or password you entered are not valid.</message>
         </LoginResult>
      </LoginResponse>
   </soap:Body>
</soap:Env]]></con:responseContent></con:response><con:response name="BadRequest" id="2069ec60-55ad-406b-a1fc-4786d20725d7" httpResponseStatus="400" mediaType="text/xml"><con:settings/><con:responseContent>Accept Header is required</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/bug" method="POST" resourcePath="/bug" id="30c48cc8-8a91-4d6d-aea7-3454712e495c"><con:settings/><con:defaultResponse>BadRequest</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.JsonSlurper
import com.eviware.soapui.SoapUI
try{
def jsonSlurper = new JsonSlurper()
def soapUI = new SoapUI()
def requestBody = mockRequest.getRequestContent()
def jsonObj = jsonSlurper.parseText(requestBody)

def id = context.expand('${#Global#bugCntr}').toInteger()
requestContext.bugId = ++id
soapUI.globalProperties.setPropertyValue( "bugCntr", requestContext.bugId.toString())

if (jsonObj.product == null || jsonObj.product == ""){
	return 'ProductRequired'
}else{
	return 'BugCreated'
}
}catch(Exception e){
	log.info e
	return "BadRequest"
}
/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="BugCreated" id="d393544f-fe0e-4e98-acff-fa6cf35897be" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{"bugId": ${bugId}}</con:responseContent></con:response><con:response name="ProductRequired" id="a982d4df-b4d1-4bbe-9031-c7d98cb47b86" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
   "error": true,
   "message": "You must select/enter a product.",
   "documentation": "https://bugzilla.readthedocs.org/en/5.0/api/",
   "code": 400
}</con:responseContent></con:response><con:response name="BadRequest" id="a7f912a8-ebf5-4289-a552-1da780ef1dd5" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{"code" : 400,
"message" : "valid input json required"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/bug/attachment" method="POST" resourcePath="/bug/attachment" id="1d196071-cf3c-4200-96dd-e667ae0c02f4"><con:settings/><con:defaultResponse>BadRequest</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.JsonSlurper
import com.eviware.soapui.SoapUI
try{
def jsonSlurper = new JsonSlurper()
def request = mockRequest.getRequestContent()
def jsonObj = jsonSlurper.parseText(request)
requestContext.bugId = jsonObj.id

requestContext.attachId = context.expand('${#Global#attachId}').toInteger()
requestContext.attachId = ++ requestContext.attachId
SoapUI.globalProperties.setPropertyValue('attachId', requestContext.attachId.toString() )

if (jsonObj.data == ""){
	return "FileNotAttached"	
}else if (jsonObj.id > 100){
	return "BugNotExists"
}else{
	return "AttachmentCreated"
}
}catch(Exception e){
	log.info e
	return "BadRequest"
}

/*import groovy.json.JsonSlurper
try{
requestContext.bugId = mockRequest.getPath().tokenize('/')[2]
def jsonSlurper = new JsonSlurper()
def request = mockRequest.getRequestContent()
def jsonObj = jsonSlurper.parseText(request)

if (jsonObj.data == ""){
	return "FileNotAttached"	
}else if (requestContext.bugId.toInteger() > 100){
	return "BugNotExists"
}else{
	return "AttachmentCreated"
}
}catch(Exception e){
	log.info e
	return "BadRequest"
}

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="AttachmentCreated" id="022ad9ce-557a-48ca-bc99-cfcae908e060" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{"bugId": ${bugId}, "attachmentId": ${attachId}}</con:responseContent></con:response><con:response name="BugNotExists" id="feccaaf6-08ed-4008-a98e-3323338defa9" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
   "code": 400,
   "error": true,
   "documentation": "https://bugzilla.readthedocs.org/en/5.0/api/",
   "message": "Bug ${bugId} does not exist."
}</con:responseContent></con:response><con:response name="FileNotAttached" id="75673d6b-6418-433c-b0b7-a80d1e052921" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
   "code": 606,
   "error": true,
   "message": "The file you are trying to attach is empty, does not exist, or you don't have permission to read it.",
   "documentation": "https://bugzilla.readthedocs.org/en/5.0/api/"
}</con:responseContent></con:response><con:response name="BadRequest" id="d26d22f7-487e-4b41-8ed5-094d6303c516" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{"code" : 400,
"message" : "valid input json required"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/test" method="GET" resourcePath="/test" id="4b4c7964-9c5b-4024-9e27-c50a3945a63f"><con:settings/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>context.setProperty("${Project#property1}", "PropertyVal")



/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>