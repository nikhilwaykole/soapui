Login
GET - http://localhost:9876/rest/login

Header
 "login":"valid-uname",
 "password": "valid-pwd"


Login Mock Response
1.LoginSuccessJSON:

{
   "id": 1,
   "token": "1-47nj12FfT7"
}

2.LoginFailedJSON:

{
   "code": 401,
   "message": "The login or password you entered are not valid.",
   "error": true,
   "documentation": "http://localhost:9876/rest/5.0/api/"
}
3.LoginSuccessXML
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <soap:Body>
      <LoginResponse xmlns="http://www.webserviceX.NET">
         <LoginResult><
         		<id>1</id>
         		<token>1-47nj12FfT7</token>
         </LoginResult>
      </LoginResponse>
   </soap:Body>
</soap:Envelope>

4.LoginFailedXML
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   <soap:Body>
      <LoginResponse xmlns="http://www.webserviceX.NET">
         <LoginResult><
         		<message>The login or password you entered are not valid.</message>
         </LoginResult>
      </LoginResponse>
   </soap:Body>
</soap:Env

----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Login Dispatch Script:  

     try{
    	 reqAcceptHeader = mockRequest.getRequestHeaders().get("Accept")[0]
      reqLoginHeader = mockRequest.getRequestHeaders().get("login")[0]
      reqPwdHeader = mockRequest.getRequestHeaders().get("password")[0]
      if (reqAcceptHeader.contains("application/json")){
      	if(reqLoginHeader == 'valid-login' && reqPwdHeader == 'valid-pwd' ){
      		log.info "login success. return JSON response"
        		return 'LoginSuccessJSON'
      	}else{
      		log.info "login failed. return json response"
        		return 'LoginFailedJSON'
      	}
      }else if (reqAcceptHeader.contains("text/xml"))
      	if(reqLoginHeader == 'valid-login' && reqPwdHeader == 'valid-pwd'){
      		log.info "login success. return XML response"
        		return 'LoginSuccessXML'
      	}else{
      		log.info "login failed. return XML response"
        		return 'LoginFailedXML'
      }
    }catch(Exception e){
    		log.info e
      	return 'BadRequest'
    }
****************************************************************************************************************************************************************
CreateBug - POST - http://localhost:9876/rest/bug

{
  "product" : "Quickoffice",
  "component" : "Word",
  "version" : "2.4",
  "summary" : "Document crashed",
  "alias" : "Crash",
  "op_sys" : "All",
  "priority" : "High",
  "rep_platform" : "All"
}

Create Bug Mock Response

1.BugCreated

{"bugId": ${bugId}}

2.ProductRequired

{
   "error": true,
   "message": "You must select/enter a product.",
   "documentation": "https://bugzilla.readthedocs.org/en/5.0/api/",
   "code": 400
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Create Bug Dispatch Script:
import groovy.json.JsonSlurper
import com.eviware.soapui.SoapUI
try{
def jsonSlurper = new JsonSlurper()
def soapUI = new SoapUI()
def requestBody = mockRequest.getRequestContent()
def jsonObj = jsonSlurper.parseText(requestBody)

def id = context.expand('${#Global#bugCntr}').toInteger()
requestContext.bugId = ++id
soapUI.globalProperties.setPropertyValue( "bugCntr", requestContext.bugId.toString())

if (jsonObj.product == null || jsonObj.product == ""){
	return 'ProductRequired'
}else{
	return 'BugCreated'
}
}catch(Exception e){
	log.info e
	return "BadRequest"
}
**************************************************************************************************************************************************************************
CreateAttachement - 
POST - http://localhost:9876/rest/bug/{bug_id}/attachment
{
  "is_patch" : true,
  "comment" : "This is a new attachment comment",
  "is_markdown" : true,
  "summary" : "Test Attachment",
  "content_type" : "text/plain",
  "data" : "test",
  "file_name" : "test_attachment.txt",
  "obsoletes" : [],
  "is_private" : false
}


CreateAttachment Mock Response:
1.AttachmentCreated

{"bugId": ${bugId}, "attachmentId": ${attachId}}

2.BugNotExists

{
   "code": 400,
   "error": true,
   "documentation": "https://bugzilla.readthedocs.org/en/5.0/api/",
   "message": "Bug ${bugId} does not exist."
}

3.FileNotAttached

{
   "code": 400,
   "error": true,
   "message": "The file you are trying to attach is empty, does not exist, or you don't have permission to read it.",
   "documentation": "https://bugzilla.readthedocs.org/en/5.0/api/"
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Create Attachemnt Dispach Script:

import groovy.json.JsonSlurper
import com.eviware.soapui.SoapUI
try{
def jsonSlurper = new JsonSlurper()
def request = mockRequest.getRequestContent()
def jsonObj = jsonSlurper.parseText(request)
requestContext.bugId = jsonObj.id

requestContext.attachId = context.expand('${#Global#attachId}').toInteger()
requestContext.attachId = ++ requestContext.attachId
SoapUI.globalProperties.setPropertyValue('attachId', requestContext.attachId.toString() )

if (jsonObj.data == ""){
	return "FileNotAttached"	
}else if (jsonObj.id > 100){
	return "BugNotExists"
}else{
	return "AttachmentCreated"
}
}catch(Exception e){
	log.info e
	return "BadRequest"
}

************************************************************************************************************************************************************************


