<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="10077520-a201-4096-8941-f157b7808966" activeEnvironment="Default" name="7.CustMangMock" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="04ddee1c-e485-496c-bdd1-7662c43a8f63" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Getcustomerbynif" path="/Multicert/rest/customerservice/getcustomerbynif" id="c307742e-1f11-42d0-be40-3c721751df0f"><con:settings/><con:parameters><con:parameter><con:name>nif</con:name><con:value>&lt;NIFnumber></con:value><con:style>QUERY</con:style><con:default>&lt;NIFnumber></con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="1e183a91-6040-46fd-8dec-54990b9fcd95" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="http://localhost/Multicert/rest/customerservice/getcustomerbynif">get:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:get="http://localhost/Multicert/rest/customerservice/getcustomerbynif">get:Fault</con:element></con:representation><con:request name="getCustDetailsByNIF" id="c1768eaa-f7c9-4e56-b8bf-9182fc9ac7fa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:originalUri>http://localhost/Multicert/rest/customerservice/getcustomerbynif</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="nif" value="111111113" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>nif</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="667b05c7-9dac-4b82-8bba-89074d973619" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ULTP-532:9876/Multicert/rest/customerservice</con:endpoint><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Getallcustomers" path="/Multicert/rest/customerservice/getallcustomers" id="c7016877-8a1c-4e9a-aea4-ffacbcf9a655"><con:settings/><con:parameters/><con:method name="GET" id="0f860538-45ee-4f92-85ac-90a0e1c54ac9" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="7f4109bb-127c-4c1a-8f30-724af6906a13" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:originalUri>http://localhost/Multicert/rest/customerservice/getallcustomers</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a38f39be-34d4-4ee1-9b76-189a5a3b6cb2" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Addcustomer" path="/Multicert/rest/customerservice/addcustomer" id="9670c924-9c7f-4469-813d-a0f3fa0f9bef"><con:settings/><con:parameters/><con:method name="Addcustomer" id="305e26e9-6e9b-45e9-b8c8-a12fc43da54d" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:add="http://localhost/Multicert/rest/customerservice/addcustomer">add:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:add="http://localhost/Multicert/rest/customerservice/addcustomer">add:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="88d34002-dca0-4d5c-b9ce-f87f6be742c6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>{"name":"Martins1","nif":"111111116","address":"Multicert","telephone":"912345678"}</con:request><con:originalUri>http://localhost/Multicert/rest/customerservice/addcustomer</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="656f20c5-258b-472e-8f48-e789de462770" name="CustMangTestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="069925e6-77f0-4873-aa57-1d6e607b66ca" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateAddCustTC" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="AddCustStep" id="572ac6e2-afe1-403b-9af8-ab7ea057bd4a"><con:settings/><con:config service="http://localhost:9876" resourcePath="/Multicert/rest/customerservice/addcustomer" methodName="Addcustomer" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AddCustStep" id="88d34002-dca0-4d5c-b9ce-f87f6be742c6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>{"name":"Martins2","nif":"111111115","address":"Multicert","telephone":"912345678"}</con:request><con:originalUri>http://localhost/Multicert/rest/customerservice/addcustomer</con:originalUri><con:assertion type="JsonPath RegEx Match" id="acce959e-6510-4056-b7b3-ebc937c19906" name="JsonPath RegEx Match"><con:configuration><path>$.custId</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments><regEx>\d+</regEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="f3aa874a-a8af-403c-9719-63d058ffea78"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" queryTimeout="" maxRows="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://localhost:3306/mock?user=root&amp;password=test</con:connectionString><con:query>select * from customers</con:query><con:assertion type="JDBC Status" id="a7b5755a-3061-423d-95c4-b4f73d643b72" name="JDBC Status"/><con:assertion type="XPath Match" id="db574a5a-74e0-4a9d-b176-1c1c54dd5ad4" name="XPath Match"><con:configuration><path>//CUSTOMERS.NAME</path><content>Martins*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JDBC Timeout" id="3015a030-9ab3-4842-b544-377ead51dabc" name="JDBC Timeout"/><con:properties/></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="f07f6589-f134-4436-a152-bfbd7f7cea0a" port="9876" path="/Multicert/rest/customerservice" host="ULTP-532" name="REST MockService 1" docroot=""><con:settings/><con:startScript/><con:properties><con:property><con:name>custId</con:name><con:value>62</con:value></con:property></con:properties><con:restMockAction name="/getallcustomers" method="GET" resourcePath="/getallcustomers" id="525046e6-ff89-460b-9be5-7bd3f7921752"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.sql.Sql

def dbDriver = "com.mysql.jdbc.Driver"
def connStr = "jdbc:mysql://localhost:3306/mock"
def sql = Sql.newInstance(connStr,"root","test",dbDriver)

def builder = new groovy.json.JsonBuilder()
customersList = []

class Customer { 
	String name; 
	String nif; 
	String address; 
	String telephone
	}

sql.eachRow("select * from customers"){ row ->
customersList.add(new Customer(name:row.name, nif:row.nif, address:row.address,telephone:row.telephone))
}
sql.close()

 builder {
  customers customersList.collect { customer ->
        ["name":customer.name,
         "nif": customer.nif,
         "address": customer.address,
         "telephone" : customer.telephone ]
    }
}
requestContext.jsonResponse=builder.toString()

return "AllCustomersResponse"


/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="AllCustomersResponse" id="bbabd341-ac91-4d40-bc31-d6659002978b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>${jsonResponse}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getcustomerbynif" method="GET" resourcePath="/getcustomerbynif" id="276e9be6-ed8e-483d-8607-008729f32909"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.JsonBuilder
import groovy.sql.Sql
def builder = new JsonBuilder()

try{
	def queryString = mockRequest.getRequest().getQueryString()
	nif = queryString.split('=')[1]
	def dbDriver = "com.mysql.jdbc.Driver"
	def connStr = "jdbc:mysql://localhost:3306/mock"
	def sql = Sql.newInstance(connStr,"root","test",dbDriver)

	def row = sql.firstRow("select * from customers where nif = ${nif}")

	builder.customer {
	name  row.name
	nif row.nif
	address row.address
	telephone row.telephone
	}

	requestContext.jsonResponse = builder.toPrettyString()

	return "CustDetailsByNIF-Response"
	
}catch(Exception e){
	log.info e
	return "NIF-NotExists-Response"
}

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="CustDetailsByNIF-Response" id="b1d8f2de-64d7-42de-a293-2f21889da8d8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>${jsonResponse}</con:responseContent></con:response><con:response name="NIF-NotExists-Response" id="22c0db7d-3356-4136-b0a2-a17d123de6e9" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{'message': 'NIF does not exists'}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getcustomerbyname" method="GET" resourcePath="/getcustomerbyname" id="b2097e0f-d87e-4bc3-abe1-1d08d28285f0"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction><con:restMockAction name="/addcustomer" method="POST" resourcePath="/addcustomer" id="7610c85b-38b8-4232-855f-28f7d0508b89"><con:settings/><con:defaultResponse>CustomerAddedResponse</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.json.JsonSlurper
import groovy.sql.Sql

try{
	def dbDriver = "com.mysql.jdbc.Driver"
	def connStr = "jdbc:mysql://localhost:3306/mock"
	def sql = Sql.newInstance(connStr,"root","test",dbDriver)

	def requestBody = mockRequest.getRequestContent()
	jsonSlurper = new JsonSlurper()
	jsonObj = jsonSlurper.parseText(requestBody);
	custId=context.expand('${#MockService#custId}').toInteger()
	requestContext.nextCustId = ++custId
	log.info requestContext.nextCustId
	context.mockService.setPropertyValue('custId', requestContext.nextCustId.toString())

	log.info("INSERT INTO customers VALUES (${requestContext.nextCustId},\"${jsonObj.name}\",\"${jsonObj.nif}\",\"${jsonObj.address}\",\"${jsonObj.telephone}\")")
	sql.execute("INSERT INTO customers VALUES (${requestContext.nextCustId},\"${jsonObj.name}\",\"${jsonObj.nif}\",\"${jsonObj.address}\",\"${jsonObj.telephone}\")")
	return "CustomerAddedResponse"
	
}catch(Exception e){
	log.info e
	return "DuplicateNIF"
	
}




/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="CustomerAddedResponse" id="4419e911-983c-4ba5-bdfb-2d20225dc2a1" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"custId": ${nextCustId}}</con:responseContent></con:response><con:response name="DuplicateNIF" id="bf2ffadf-52ab-4989-a000-a5f619ad217b" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{'message': 'duplicate nif'}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/deletecustomer" method="POST" resourcePath="/deletecustomer" id="2c65b277-fd59-4989-8d70-6d60587d2be4"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction></con:restMockService><con:properties><con:property><con:name>custId</con:name><con:value>3</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>