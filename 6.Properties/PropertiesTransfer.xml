<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="18eb66ed-d5f1-43ba-8e84-b9646878a762" activeEnvironment="Default" name="Properties" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="6d8c5fe0-00ee-48e0-acfd-7f0720514b7c" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ULTP-532:8080/</con:endpoint><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Login" path="/login" id="df40300b-482e-428b-ba60-a9bcc167c0c3"><con:settings/><con:parameters/><con:method name="Login" id="988b3be8-0a8f-44de-9d04-15de17e41b4f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/login">log:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="loginReq" id="398988ba-2ee0-4d1b-94b9-214ff54a7ee6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="36f6a7af-c6f8-48e7-827d-3d31717c952a" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:9876" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ULTP-532:9876/</con:endpoint><con:endpoint>http://localhost:9876</con:endpoint></con:endpoints><con:resource name="Product" path="/product/{id}" id="f3f93456-86f8-43bb-9a46-80609d754300"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Product" id="5563f9a2-fe50-49a6-a84f-d6ed8f44e1b1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://localhost/product/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="GetProductReq" id="95d8c625-a13c-4e1c-a394-c4847cfea36b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="0340c93b-2f82-411b-b13a-710f9fd5d6e4" name="TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ddfa10cd-630c-4b64-be51-e301cb9102ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Login-loginReq" id="2a04406a-b891-4edb-9d9c-3e44d47955cd"><con:settings/><con:config service="http://localhost:9876" resourcePath="/login" methodName="Login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Login-loginReq" id="398988ba-2ee0-4d1b-94b9-214ff54a7ee6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="login" value="valid-uname"/>
  &lt;con:entry key="password" value="valid-pwd"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request/><con:originalUri>http://localhost/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9f2b3f25-851e-4c2c-a600-4d28293e97e3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="7ad706ca-413a-44e2-8add-baad43925336"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.types.StringToStringMap

jsonSlurper = new JsonSlurper()
def body = testRunner.testCase.testSteps['Login-loginReq'].testRequest.response.contentAsString
jsonObj = jsonSlurper.parseText(body)
token = jsonObj.token
def headers = new StringToStringMap()
headers.put("token",token)
testRunner.testCase.testSteps['Product-GetProductReq'].testRequest.setRequestHeaders(headers)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Product-GetProductReq" id="3a6a5376-99ec-410c-9a36-947f11591187"><con:settings/><con:config service="http://localhost:9876" resourcePath="/product/{id}" methodName="Product" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Product-GetProductReq" id="95d8c625-a13c-4e1c-a394-c4847cfea36b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="token" value="qwertyu" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:9876</con:endpoint><con:request>&lt;Response xmlns="http://localhost/login">
   &lt;token>qwertyu&lt;/token>
&lt;/Response></con:request><con:originalUri>http://localhost/product/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c0789b43-9baa-4954-92bf-2d5fecd2d2a2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="96d86a19-19cc-4174-b1aa-7bf474a2bc5b" port="9876" path="/" host="ULTP-532" name="PropertiesMock" docroot=""><con:settings/><con:properties/><con:restMockAction name="/login" method="GET" resourcePath="/login" id="9ae31d81-7d72-4f36-a794-9d3c9ecdc1d1"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>try{
def login = mockRequest.getRequestHeaders().get("login")[0]
def pwd = mockRequest.getRequestHeaders().get("password")[0]
if (login == "valid-uname" &amp;&amp; pwd == "valid-pwd"){
	return "LoginSuccess"
}else{
	return "LoginFailed"
}
}catch(Exception e){
	log.info e
	return "LoginFailed" 
}

/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="LoginSuccess" id="3370da97-4f26-4768-894a-a9dd87e44c91" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"token": "qwertyu"}</con:responseContent></con:response><con:response name="LoginFailed" id="63792f02-a85a-4cfa-b5f4-3757b130ee45" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{"message": "invalid credentails"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/product/" method="GET" resourcePath="/product/" id="eefdc650-88e5-4ea2-9b00-48b9f3a55bd1"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unauthorized</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>try{
def token = mockRequest.getRequestHeaders().get("token")[0]

if(token == "qwertyu"){
	return "ProductDetails"
}else{
	return "Unauthorized"
}
}catch(Exception e){
	log.info e
	return "Unauthorized"
}
/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="ProductDetails" id="ff23db97-737e-44a2-a279-5f15ffbfbcc6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"product":{
	"id": 1,
	 "type": "toy",
	 "name": "beyblade".
	 "price": 800
	 
	}
}
</con:responseContent></con:response><con:response name="Unauthorized" id="3d3bcc23-2d3f-4477-ae52-74cc7b599e20" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{"message": "invalid credentails"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>